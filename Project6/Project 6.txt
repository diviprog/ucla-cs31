1.
a.
int main () {
    int arr[3] = { 5, 10, 15 };
    int* ptr = arr;

    *ptr = 30;          // set arr[0] to 30
    *(ptr + 1) = 20;      // set arr[1] to 20
    ptr += 2;
    ptr[0] = 10;        // set arr[2] to 10

    ptr -= 2;
    while (ptr < arr+3)
    {
        cout << *ptr << endl;    // print values
        ptr++;
    }
}


b.
void findMax(int arr[], int n)
{
    int* pToMax = nullptr;
    if (n <= 0)
        return;      // no items, no maximum!
    
    pToMax = arr;
    
    for (int i = 1; i < n; i++)
    {
        if (arr[i] > *pToMax) {
            pToMax = &arr[i];
        }
    }
}

void problemB () {
    int nums[4] = { 5, 3, 15, 6 };
    int* ptr = &nums[0];

    ptr = findMax(nums, 4);
    cout << "The maximum is at address " << ptr << endl;
    cout << "It's at position " << ptr - nums << endl;
    cout << "Its value is " << *ptr << endl;
}

Explanation - the original function changed the pointer address pToMax and not the value contained by the pointer itself


c.
void computeCube(int n, int* ncubed)
{
    *ncubed = n * n * n;
}

void problemC () { // the pointer did not point to an object initialially and thus there was a runtime error as computeCube could not assign the value to a memory location
    int result;
    int* ptr = &result;
    computeCube(5, ptr);
    cout << "Five cubed is " << *ptr << endl;
}

Explanation - the original function did not initialise the pointer to point to a specific memory location, the runtime error thus evolved was then fixed by initialising the pointer ptr pointing to result of computeCube


d.
bool strequal(const char str1[], const char str2[])
{
    while (*str1 != '\0' && *str2 != '\0')  // zero bytes at ends
    {
        if (*str1 != *str2)  // compare corresponding characters
            return false;
        str1++;            // advance to the next character
        str2++;
    }
    return *str1 == *str2;   // both ended at the same time?
}

void problemD () {
    char a[15] = "Chen, Y.";
    char b[15] = "Chen, Y.";

    if (strequal(a,b)) {
        cout << "They're the same person!\n";
    }
}

Explanation - the function initially compared the pointers of str1 and str2 instead of the content of the two strings, in the loop condition also it checked whether the addresses of the pointers were not null and not the content of the pointers themselves


e. Explanation - the pointer getPtrToArray returns a pointer to a local array anArray which when the function is exited the pointer does not point to anything, dereferencing this pointer in the main function causes an error


2. 
a. double* cat;
b. double mouse[5];
c. cat = &mouse[4];
d. *cat = 25.0;
e. *(mouse+3) = 17.0;
f. cat -= 3;
g. cat[1]=42.0;
h. cat[0]=54.0;
i. bool d = (*cat == mouse);
j. bool b = (*cat == *(cat+1));


3.
a.
double mean (const double* scores, int numScores) {
	const double* ptr = scores;
	double total = 0;
	for (int i = 0; i < numScores; i++){
		total += *(ptr +i);
	}
	return total/numScores;
}

b.
const char* findTheChar(const char str[], char ch) {
	for (int k = 0; str+k!=0; k++) {
		if (*(str+k)==ch) {
			return str+k;
		}
	}
	return nullptr;
}

c.
const char* findTheChar(const char* str, char chr)
{
    const char* ptr = str;

    while (*ptr != 0 && *ptr != chr)
        ++ptr;

    if (*ptr == chr){
        return ptr;
    }
    else return nullptr;
}


4.
I have copied the function and added comments along each line to show its function and how it affects the output of the program -

int main ()
{
    int array[6] = { 5, 3, 4, 17, 22, 19 };

    int* ptr = maxwell(array, &array[2]); // compares the value of array[0] and array[2] to return the greater value (array[0] in this case)
    *ptr = -1; // array[0] is set to -1
    ptr += 2; // pointer incremented
    ptr[1] = 9; // ptr+1 (array[3]) is set to 9
    *(array+1) = 79; // array[1] is set to 79 --> array = {-1,79,4,9,22,19}

    cout << &array[5] - ptr << endl; // prints the difference between the addresses of the pointers - ptr points to array[2] so &array[5] - &array[2] prints 3

    swap1(&array[0], &array[1]); // swaps the pointers of array[0] and array[1] - values of the array remain the same
    swap2(array, &array[2]); // swaps the values of array[0] and array[2] - array is modified to {4,79,-1,9,22,19}

    for (int i = 0; i < 6; i++) {
        cout << array[i] << endl; // prints the contents of the array chronologically on separate lines resulting in 4,79,-1,9,22,19
    }
}


5.
void removeS (char* str) {
    for (char* ptr = str; *ptr!=0; ptr++){
        if ((*ptr=='s') or (*ptr=='S')){
            while (*ptr!=0) {
                *ptr = *(ptr+1);
                ptr++;
            }
            *ptr = '\0';
            ptr = str;
        }
    }
}
